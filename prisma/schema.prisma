generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Person {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  firstLastName   String
  note            String?          @db.VarChar(255)
  authorId        String
  authorName      String?
  lastModifiedBy  String?
  height          String?
  shoeSize        String?
  size            String?
  waistSize       String?
  packageRequests PackageRequest[]

  @@index([authorId])
}

model PackageRequest {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  authorId  String
  personId  String
  person    Person            @relation(fields: [personId], references: [id], onDelete: Cascade)
  items     ItemsOnRequests[]

  @@index([authorId])
  @@index([personId])
}

model PackageItem {
  id        Int               @id @default(autoincrement())
  name      String            @default("")
  category  String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  authorId  String
  requests  ItemsOnRequests[]
}

model ItemsOnRequests {
  itemId     Int
  requestId  Int
  createdAt  DateTime       @default(now())
  assignedBy String
  item       PackageItem    @relation(fields: [itemId], references: [id])
  request    PackageRequest @relation(fields: [requestId], references: [id])

  @@id([itemId, requestId])
  @@index([itemId])
  @@index([requestId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
